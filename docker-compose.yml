version: "3.8"

services:
  grpc-learning-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: grpc-learning-service
    ports:
      - "8080:8080" # REST API port
      - "9000:9000" # gRPC port
    environment:
      - QUARKUS_PROFILE=prod
      - JAVA_OPTS_APPEND=-Xmx512m -Xms256m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - grpc-network

  # Optional: Add a database for future enhancements
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: grpc-learning-db
  #   environment:
  #     POSTGRES_DB: grpc_learning
  #     POSTGRES_USER: grpc_user
  #     POSTGRES_PASSWORD: grpc_password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - grpc-network

  # Optional: Add monitoring with Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: grpc-learning-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - grpc-network

  # Optional: Add Grafana for visualization
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grpc-learning-grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - grpc-network

networks:
  grpc-network:
    driver: bridge
# volumes:
#   postgres_data:
#   grafana_data:
